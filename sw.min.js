async function install(){let cache=await caches.open('v13')
return await cache.addAll(['/albertforfuture.de/custom.min.css','/albertforfuture.de/logo.min.svg','https://mohe2015.github.io/albertforfuture.de/logo.png','https://mohe2015.github.io/albertforfuture.de/bundle.js','https://mohe2015.github.io/albertforfuture.de/sw.min.js','/albertforfuture.de/manifest.min.json','https://mohe2015.github.io/albertforfuture.de/offline/'])}
self.addEventListener('install',async(event)=>{console.log('install');self.skipWaiting();event.waitUntil(install());});async function activate(){let cacheNames=await caches.keys()
await Promise.all(cacheNames.filter(cacheName=>{return cacheName!=='v13'}).map(async cacheName=>{return await caches.delete(cacheName);}))}
self.addEventListener('activate',event=>{console.log('activate_');self.clients.claim();event.waitUntil(activate());});async function fetchOnline(event){let response=await fetch(event.request)
let cache=await caches.open('v13')
if(event.request.method!=='POST'){await cache.put(event.request,response.clone())}
return response}
async function onfetch(event){var pathname=new URL(event.request.url).pathname;try{return await caches.match(event.request)||await fetchOnline(event)}catch(error){console.log(error)
return await caches.match('/offline/')}}
self.addEventListener('fetch',event=>{event.respondWith(onfetch(event))});self.addEventListener('notificationclose',event=>{const notification=event.notification;console.log('notificationclose',event.notification)});async function notificationclick(event){let clis=await clients.matchAll()
console.log('clients',clis)
const client=clis.find(c=>{return c.visibilityState==='visible';});if(client!==undefined){client.navigate(event.notification.data.url);client.focus();}else{clients.openWindow(event.notification.data.url);event.notification.close();}}
self.addEventListener('notificationclick',async event=>{const notification=event.notification;console.log('notificationclick',event.notification)
const action=event.action;if(action==='close'){notification.close();}else{event.waitUntil(notificationclick(event));}
let notifications=await self.registration.getNotifications()
notifications.forEach(notification=>{notification.close();});});async function push(event,options){try{let response=await fetch(options.data.url)
console.log('push prefetched data: ',response)}catch(error){console.log('we couldnt prefetch the article but still have to show a notification :(')}
await self.registration.showNotification('albertforfuture.de',options);}
self.addEventListener('push',async event=>{let body;if(event.data){body=event.data.json();}else{body={text:'albertforfuture.de wurde aktualisiert!',url:'/'}}
console.log('push',body)
const options={body:body.text,icon:'https://mohe2015.github.io/albertforfuture.de/logo.png',badge:'https://mohe2015.github.io/albertforfuture.de/logo.png',lang:'de-DE',data:body};event.waitUntil(push(event,options));});